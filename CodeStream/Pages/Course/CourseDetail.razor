@page "/course-detail/{Id:int}"
@inject ISkillRepository skillRepository
@inject ICourseRepository courseRepository
@inject IClassDayRepository ClassDayRepository
@inject CartState cartState
@inject IJSRuntime JsRuntime

<h3 class="text-center mt-5 mb-5">Detalle del Curso</h3>
<div class="container d-flex flex-column justify-content-center align-items-center card shadow-lg py-5 mb-5">
    <section class="row-col-12 mb-3">
        @foreach (var item in courseSkill)
        {
            <i class="fa-solid fa-chevron-right"></i>
            <span>@item.Name &nbsp;</span>
        }
    </section>
    <section class="d-flex flex-column  ">
        <div class="d-flex flex-column justify-content-center align-items-center">
            <img src="@courseDetail.Image" class="mx-auto" />
        </div>
        <h2 class=" mt-3">@courseDetail.Name</h2>
        <p class="">@courseDetail.Description</p>
       
        <div class="">
            <label><strong>Dificultad:</strong> </label>
            <span>@courseDetail.Level</span>
        </div>
        <div class="">
            <label><strong>Duracion:</strong> </label>
            <span>@courseDetail.Duration</span>
        </div>
        <div class="">
            <label><strong>Profesor:</strong> </label>
            <NavLink href="@($"/teacherDetail/{courseDetail.TeacherId}")">@courseDetail.TeacherName</NavLink>
        </div>
        <div class="">
            <label><strong>Fecha de Inicio: </strong></label>
            <span>@courseDetail.StartDate.Date.ToShortDateString()</span>
        </div>
        <div class="col">
            <label><strong>Fecha de Finalizacion:</strong> </label>
            <span>@courseDetail.EndDate.Date.ToShortDateString()</span>
        </div>
        <div class="mt-5">@((MarkupString)courseDetail.Description2)</div>

        <table class="table mt-3">
            <thead>
                <tr>
                    <th class="text-center" scope="col">Lunes</th>
                    <th class="text-center" scope="col">Martes</th>
                    <th class="text-center" scope="col">Miércoles</th>
                    <th class="text-center" scope="col">Jueves</th>
                    <th class="text-center" scope="col">Viernes</th>
                    <th class="text-center" scope="col">Sábado</th>
                    <th class="text-center" scope="col">Domingo</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                <tr>
                    <td class="text-center">@GetHours(1).Item1 - @GetHours(1).Item2</td>
                    <td class="text-center">@GetHours(2).Item1 - @GetHours(2).Item2</td>
                    <td class="text-center">@GetHours(3).Item1 - @GetHours(3).Item2</td>
                    <td class="text-center">@GetHours(4).Item1 - @GetHours(4).Item2</td>
                    <td class="text-center">@GetHours(5).Item1 - @GetHours(5).Item2</td>
                    <td class="text-center">@GetHours(6).Item1 - @GetHours(6).Item2</td>
                    <td class="text-center">@GetHours(7).Item1 - @GetHours(7).Item2</td>
                </tr>
            </tbody>
        </table>

        <p class="mt-3 fs-4"><strong>@courseDetail.Price.ToString("#,0.00")&nbsp;DOP$</strong></p>
    </section>

    <button class="btn btn-info" @onclick="()=>OnclickAddCartHandler(Id)">Añadir a la cesta</button>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private CourseDetailtDTO courseDetail = new CourseDetailtDTO();
    private List<Skill> courseSkill = new List<Skill>();
    private List<ClassDayListDTO> classDayList = new List<ClassDayListDTO>();

    protected async override Task OnInitializedAsync()
    {
        courseDetail = await courseRepository.GetCourseDetail(Id);
        courseSkill = await skillRepository.GetSkillByCourseId(Id);
        classDayList = await ClassDayRepository.GetAllByCourseId(Id);
    }
    private Tuple<string, string> GetHours(int day)
    {
        var dayEntry = classDayList.FirstOrDefault(x => x.ClassWeekId == day);
        if (dayEntry != null)
        {
            return Tuple.Create(dayEntry.StartHour.ToString("hh\\:mm"), dayEntry.EndHour.ToString("hh\\:mm"));
        }
        else
        {
            return Tuple.Create("", "");
        }
    }

    private async Task OnclickAddCartHandler(int courseId)
    {



        await JsRuntime.InvokeVoidAsync("AddToCart", courseId);
        var cart = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "cart");
        cartState.cart = JsonConvert.DeserializeObject<List<int>>(cart) ?? new List<int>();
        cartState.SetCart();
    }
}
