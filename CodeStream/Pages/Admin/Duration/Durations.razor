@page "/admin/durations"
@inject IDurationRepository durationRepository
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager


@attribute [Authorize(Roles = "admin")]

<h3 class="text-center mt-5">Durations</h3>



<div class="container mb-5">
    <div class="w-100 d-flex justify-content-end mb-3">
        <NavLink href="/admin/createDuration" type="button" class="btn btn-info ms-auto"><i class="fa-solid fa-plus"> </i> Add Duration </NavLink>
    </div>

    <table id="adminTable" class="table table-striped" style="width:100%">
        <thead>
            <tr>
                <th class="text-center">Id</th>
                <th class="text-center">Name</th>
                <th class="text-center">Active</th>
                <th class="text-center">Accions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var d in duration)
            {
                <tr>
                    <td class="text-center">@d.Id</td>
                    <td class="text-center">@d.Name</td>
                    <td class="text-center"><InputCheckbox role="button" @bind-Value=d.Active @onclick="()=>OnchangeCheckbox(d.Active, d.Id)"></InputCheckbox></td>
                    <td>

                        <div class="text-center">
                            <i @onclick="@(()=> navigationManager.NavigateTo($"/admin/updateDuration/{d.Id}"))" type="button" class="fa-solid fa-pen-to-square"></i>
                        </div>

                    </td>

                </tr>
            }
        </tbody>

    </table>
</div>
@code {
    private List<AdminDurationListDTO> duration = new List<AdminDurationListDTO>();

    protected override async Task OnInitializedAsync()
    {
        duration = await durationRepository.GetAdminDurationListDTOs();


    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
    

        await Task.Delay(100);

        await JSRuntime.InvokeVoidAsync("DataTable");

    }

    private async Task OnchangeCheckbox(bool active, int durationId)
    {

        var isUpdated = await durationRepository.UpdateActiveStatus(active, durationId);
        duration = await durationRepository.GetAdminDurationListDTOs();

    }


}
